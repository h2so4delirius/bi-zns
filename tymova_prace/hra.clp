(defglobal ?*numFigures* = (create$))
(defglobal ?*numCube* = (create$))

; Starting welcoming
(defrule starter
        ?init <- (initial-fact)
         =>
        (retract ?init)
        (printout t "  " crlf)
        (printout t "  " crlf)
        (printout t "  " crlf)
        (printout t "  " crlf)
        (printout t "              ")
        (printout t "WELCOME TO THE LUDO EXPERT SYSTEM" crlf)
        (printout t "  " crlf)
        (printout t " This Intelligent Ludo expert ")
        (printout t "System will help you make ")
        (printout t "  " crlf)
        (printout t "   a move in a game, regardles of current game state." crlf)
        (printout t "  " crlf)
        (printout t " Smash <Enter> to win thanks to power of AI. " crlf)
        (printout t "  " crlf)
        (printout t "  " crlf)
        (printout t "  " crlf)
        (bind ?answer (readline))
        (assert (status get_info))
)

(defrule first_question
    ?scrn <- (status get_info)
    =>
    (retract ?scrn)
    (printout t "  " crlf)
    (printout t "How much of your figurines are on the table?" crlf)
    (printout t "  " crlf)
    (bind ?answer (read))
    (if (eq ?answer 0)
        then (assert (status empty_table))
        else (bind ?*numFigures* ?answer)
             (assert (status not_empty_table))
    )
)

(defrule empty_table
    ?scrn <- (status empty_table)
    =>
    (retract ?scrn)
    (printout t "  " crlf)
    (printout t "How much fell on the dice?" crlf)
    (printout t "  " crlf)
    (bind ?answer (read))
    (if (eq ?answer 6)
        then (assert (todo put_figure_on_start))
        else(printout t " " crlf)
            (printout t "You can't put any figure on the table." crlf)
            (assert (status end_move))
    )
)

(defrule start_table
    ?scrn <- (todo put_figure_on_start)
    =>
    (retract ?scrn)
    (printout t " " crlf)
    (printout t "Roll the dice one more time and tell how much was on it." crlf)
    (printout t " " crlf)
    (bind ?answer (read))
    (printout t "Move figure " (+ ?answer 6) " times." crlf)
    (assert (status end_move))    
)

(defrule end_move
    ?scrn <- (status end_move)
    =>
    (retract ?scrn)
    (printout t " " crlf)
    (printout t "If you land on the figure it should be removed back to home." crlf)
    (printout t " " crlf)
    (printout t "Your turn has ended." crlf)
)


(defrule not_empty_table
    ?scrn <- (status not_empty_table)
    =>
    (retract ?scrn)
    (printout t "  " crlf)
    (printout t "How much fell on the dice?" crlf)
    (printout t "  " crlf)
    (bind ?num (read))
    (if (eq ?num 6)
        then(printout t "  " crlf)
            (printout t "Do you have the figure on the start? Y/N" crlf)
            (printout t "  " crlf)
            (bind ?answer (read))
            (if (eq (str-compare ?answer "Y") 0)
                then(printout t " " crlf)
                    (printout t "Remove figure from the start and put yours there." crlf)
                    (printout t " " crlf)
            )
            (printout t "Move your figure " (+ 6 ?num) " times" crlf)
            (assert (status end_move))
        else(bind ?*numCube* ?num)
            (assert (status figures_on_table))
    )
)

(deftemplate figure
    (slot number) (slot places_to_end) (slot land_on_enemy) (slot places_to_enemy_back) (slot land_on_ally))

(defrule figures_on_table
    ?scrn <- (status figures_on_table)
    =>
    (retract ?scrn)
    (if (eq ?*numFigures* 1)
        then(assert (status end_move))
        else(bind ?count 1)
            (printout t " " crlf)
            (printout t "Let's check all figures..." crlf)
            (printout t " " crlf)
            (loop-for-count ?*numFigures*
                (printout t "Choose a figure to describe." crlf)
                (printout t "This would be your figure number " ?count "." crlf)
                (printout t " " crlf)
                (printout t "How much fields till the finish?" crlf)
                (printout t " " crlf)
                (bind ?till_end (read))
                (printout t " " crlf)
                (printout t "If you make your move with this figure, will it land on enemy figure? Y/N" crlf)
                (printout t " " crlf)
                (bind ?land_on_enemy (read))
                (printout t " " crlf)
                (printout t "How many fields to the nearest enemy figure behind?" crlf)
                (printout t " " crlf)
                (bind ?places_to_enemy_back (read))
                (printout t " " crlf)
                (printout t "If you make your move with this figure, will you land your figure? Y/N" crlf)
                (printout t " " crlf)
                (bind ?land_on_ally (read))
                (printout t " " crlf)
                (assert (figure (number ?count) (places_to_end ?till_end) (land_on_enemy ?land_on_enemy) (places_to_enemy_back ?places_to_enemy_back) (land_on_ally ?land_on_ally)))
                (bind ?count (+ ?count 1))
            )
            (if (not(do-for-fact((?f figure))
                    (eq ?f:places_to_end ?*numCube*)
                    (bind ?figureToMove ?f:number)
                ))
                then(if (not(do-for-fact((?f figure))
                            (eq (str-compare ?f:land_on_enemy "Y") 0)
                            (bind ?figureToMove ?f:number)
                        ))
                        then(if (not(any-factp ((?f figure)) (eq (str-compare ?f:land_on_ally "N") 0)))
                                then(do-for-fact((?f1 figure) (?f2 figure))
                                        (< ?f1:places_to_enemy_back ?f2:places_to_enemy_back)
                                        (bind ?figureToMove ?f1:number)
                                    )
                                else(do-for-fact((?f1 figure) (?f2 figure))
                                        (and (< ?f1:places_to_enemy_back ?f2:places_to_enemy_back)
                                            (eq (str-compare ?f1:land_on_ally "N") 0)
                                        )
                                        (bind ?figureToMove ?f1:number)
                                    )
                            )
                    )
            )
            (if (any-factp ((?f figure)) (<= ?*numCube* ?f:places_to_end))
                then(printout t " " crlf)
                    (printout t "You suggest to move figure number " ?figureToMove crlf)
                    (printout t " " crlf)
                    (assert (status end_move))
                else(printout t " " crlf)
                    (printout t "You can't make a move." crlf)
            )
    )
)
